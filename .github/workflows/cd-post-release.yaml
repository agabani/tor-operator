name: "CD: Post Release"
on:
  push:
    tags:
      - "v*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release-github:
    name: "Release: GitHub"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Release
        id: release
        uses: softprops/action-gh-release@v1

  release-binary:
    name: "Release: Binary"
    needs: release-github
    strategy:
      fail-fast: false
      matrix:
        build: [x86_64-linux, x86_64-macos, x86_64-windows]
        include:
          - build: x86_64-linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false
          #   - build: aarch64-linux
          #     os: ubuntu-latest
          #     rust: stable
          #     target: aarch64-unknown-linux-gnu
          #     cross: true
          - build: x86_64-macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cross: false
          - build: aarch64-macos
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            cross: false
          - build: x86_64-windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            cross: false
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}
      - name: Cross
        if: ${{ matrix.cross }}
        uses: actions-rs/cargo@v1
        with:
          args: cargo-auditable cargo-audit
          command: install
      - name: Auditable
        uses: actions-rs/cargo@v1
        with:
          args: cargo-auditable cargo-audit
          command: install
          use-cross: ${{ matrix.cross }}
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          args: build --release --target ${{ matrix.target }} --verbose
          command: auditable
          use-cross: ${{ matrix.cross }}
      - name: Archive
        id: archive
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/tor-operator.exe" "dist/"
            7z a tor-operator-${{ needs.release-github.outputs.version }}-${{ matrix.build }}.zip ./dist/tor-operator.exe
            echo "asset=tor-operator-${{ needs.release-github.outputs.version }}-${{ matrix.build }}.zip" >> $GITHUB_OUTPUT
          else
            cp "target/${{ matrix.target }}/release/tor-operator" "dist/"
            tar czf "tor-operator-${{ needs.release-github.outputs.version }}-${{ matrix.build }}.tar.gz" -C "dist" .
            echo "asset=tor-operator-${{ needs.release-github.outputs.version }}-${{ matrix.build }}.tar.gz" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.archive.outputs.asset }}

  release-container-image:
    name: "Release: Container Image"
    needs: release-github
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }}
          # cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ matrix.platform == 'linux/amd64' && 'linux-amd64' || 'linux-arm64' }},mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  release-container-manifest:
    name: "Release: Container Manifest"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - release-container-image
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  release-helm:
    name: "Release: Helm"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - release-container-manifest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - name: Install Helm
        uses: azure/setup-helm@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Package Helm
        run: |
          rm -rf .cr-release-packages
          mkdir -p .cr-release-packages
          cd .cr-release-packages
          helm package ../charts/tor-operator/
          cd ..
      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          config: chart-releaser.yaml
          skip_packaging: true
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
